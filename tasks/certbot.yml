---
#Make sure new created subdomains (manual or toni.dns) are picked up // necessary if a subdomain ip differs from domain ip
#Not sure if that resolves anything // todo: update etc/hosts
- name: Flush local DNS cache
  shell: 
    cmd: systemd-resolve --flush-caches
    executable: /bin/bash
  become: yes
  register: flushed
  become_user: "{{ user }}"

- name: restart systemd-resolved service
  systemd:
    name: systemd-resolved
    enabled: yes
    state: restarted

## Snap recommended by certbot
- name: Remove Certbot PPA
  apt_repository:
    repo: "ppa:certbot/certbot"
    state: absent

- name: Remove certbot apt packages
  apt:
    name:
      - certbot
      - python-certbot-apache
      - python3-certbot-apache
      - python-certbot-nginx
      - python3-certbot-nginx
    state: absent
    purge: yes

- name: Install snapd
  apt:
    name:
      - snapd
    state: latest

- name: Install certbot snap with option --classic
  community.general.snap:
    name: certbot
    classic: yes    

- name: Make sure nginx uses latest configs
  meta: flush_handlers

- file:
    state: directory
    path: "/etc/letsencrypt/"
    recurse: yes

- name: touch
  file:
    path: /etc/letsencrypt/cli.ini
    state: touch

- name: Ensure Let's Encrypt uses API v2
  lineinfile:
    path: /etc/letsencrypt/cli.ini
    regexp: "^server"
    line: "server = {{ letsencrypt_endpoint }}"
    
- name: Ensure folder for letsencrypt exists
  file:
    name: /var/www/letsencrypt/.well-known/acme-challenge
    state: directory

- name: Publish html test file
  copy:
    content: |
          Yeah - got access!
    mode: 0755
    dest: /var/www/letsencrypt/.well-known/acme-challenge/access

# - name: Debug var
#   debug:
#     var: certbot_server

- name: "Wait until server is accessible"
  when: not certbot_certificate_file_path.stat.exists
  uri:
    url: "https://{{ certbot_server }}/.well-known/acme-challenge/access"
    status_code: 200
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 30
  delay: 5

- name: Remove folder
  file:
    state: absent
    path: "/var/www/letsencrypt/.well-known"

- name: Generate Certificates
  command: certbot certonly -d {{ letsencrypt_domainname }} --agree-tos --email {{ letsencrypt_email }} -n --webroot -w "/var/www/letsencrypt"
  when: not certbot_certificate_file_path.stat.exists
